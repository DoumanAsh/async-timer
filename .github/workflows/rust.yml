name: Rust

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '**'

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v1

    - name: Install Rust Unix
      if: runner.os != 'Windows'
      run: |
        if rustup --version >/dev/null 2>&1; then
            rustup update
        else
             curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable
             echo ::add-path::$HOME/.cargo/bin
        fi
    - name: Install Rust Windows
      if: runner.os == 'Windows'
      run: |
        if (Get-Command "rustup" -ErrorAction SilentlyContinue) {
            rustup update
        } else {
            Invoke-WebRequest https://static.rust-lang.org/rustup/dist/i686-pc-windows-gnu/rustup-init.exe -OutFile rustup-init.exe
            ./rustup-init.exe -y --profile minimal --default-toolchain stable
            echo ::add-path::%USERPROFILE%\.cargo\bin
        }

    - name: Rust version
      run: |
        cargo --version
        rustc --version

    - name: Check WASM
      run: |
        rustup target add wasm32-unknown-unknown
        cargo check --target wasm32-unknown-unknown

    - name: Test with tokio 1.0
      if: runner.os != 'Windows'
      run: cargo test --features tokio1 --release -- --nocapture

    - name: Test
      run: cargo test --all --features std

    - name: Test with C wrapper
      if: runner.os == 'Linux'
      run: cargo test --all --features c_wrapper
